{"version":3,"sources":["components/BarChart.js","App.js","serviceWorker.js","index.js"],"names":["BarChart","useEffect","svg","d3","append","attr","xScale","range","svgWidth","padding","yScale","svgHeight","xAxis","yAxis","g","tooltip","style","then","data","domain","map","d","indicesBetweenPoints","Math","round","length","call","tickFormat","split","tickValues","i","undefined","filter","item","ticks","text","selectAll","enter","bandwidth","on","transition","duration","html","pageX","pageY","drawChart","className","id","App","props","openVis","vis","history","push","exact","path","render","Fragment","onClick","Boolean","window","location","hostname","match","ReactDOM","basename","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e0fbd8c5.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport \"./BarChart.css\";\r\n\r\nexport default function BarChart() {\r\n  const drawChart = () => {\r\n    const padding = 200;\r\n    const svgWidth = 800;\r\n    const svgHeight = 600;\r\n    const width = svgWidth - padding;\r\n    const height = svgHeight - padding;\r\n\r\n    // Create svg container\r\n    const svg = d3\r\n      .select(\"#barchart\")\r\n      .append(\"svg\")\r\n      .attr(\"width\", svgWidth)\r\n      .attr(\"height\", svgHeight);\r\n\r\n    const xScale = d3\r\n      .scaleBand()\r\n      .range([0, width])\r\n      .padding(0.4);\r\n\r\n    const yScale = d3.scaleLinear().range([height, 0]);\r\n\r\n    const xAxis = d3.axisBottom(xScale);\r\n    const yAxis = d3.axisLeft(yScale);\r\n\r\n    // Create group\r\n    const g = svg.append(\"g\").attr(\"transform\", `translate(${100},${100})`);\r\n\r\n    let tooltip = d3\r\n      .select(\"#barchart\")\r\n      .append(\"div\")\r\n      .attr(\"class\", \"tooltip\")\r\n      .attr(\"id\", \"tooltip\")\r\n      .style(\"opacity\", 0);\r\n\r\n    d3.json(\r\n      \"https://raw.githubusercontent.com/FreeCodeCamp/ProjectReferenceData/master/GDP-data.json\"\r\n    ).then(function(data) {\r\n      xScale.domain(data.data.map(d => d[0]));\r\n      yScale.domain([0, d3.max(data.data, d => d[1])]);\r\n\r\n      const indicesBetweenPoints = Math.round(data.data.length / 14);\r\n      g.append(\"g\")\r\n        .attr(\"id\", \"x-axis\")\r\n        .attr(\"transform\", `translate(0,${height})`)\r\n        .call(\r\n          xAxis\r\n            .tickFormat(d => {\r\n              const date = d.split(\"-\");\r\n              return date[0];\r\n            })\r\n            .tickValues(\r\n              data.data\r\n                .map((d, i) =>\r\n                  i % indicesBetweenPoints === 0 ? d[0] : undefined\r\n                )\r\n                .filter(item => item)\r\n            )\r\n        );\r\n\r\n      g.append(\"g\")\r\n        .attr(\"id\", \"y-axis\")\r\n        .call(\r\n          yAxis\r\n            .tickFormat(function(d) {\r\n              return d;\r\n            })\r\n            .ticks(10)\r\n        )\r\n        .append(\"text\")\r\n        .attr(\"class\", \"ticks\")\r\n        .attr(\"y\", 6)\r\n        .attr(\"dy\", \"0.71em\")\r\n        .attr(\"text-anchor\", \"end\")\r\n        .text(\"value\");\r\n\r\n      g.selectAll(\".bar\")\r\n        .data(data.data)\r\n        .enter()\r\n        .append(\"rect\")\r\n        .attr(\"class\", \"bar\")\r\n        .attr(\"data-date\", d => d[0])\r\n        .attr(\"data-gdp\", d => d[1])\r\n        .attr(\"x\", function(d) {\r\n          return xScale(d[0]);\r\n        })\r\n        .attr(\"y\", function(d) {\r\n          return yScale(d[1]);\r\n        })\r\n        .attr(\"width\", xScale.bandwidth())\r\n        .attr(\"height\", function(d) {\r\n          return height - yScale(d[1]);\r\n        })\r\n        .on(\"mouseover\", function(d) {\r\n          tooltip\r\n            .transition()\r\n            .duration(200)\r\n            .style(\"opacity\", 0.9);\r\n          tooltip\r\n            .html(d[0] + \": \" + d[1])\r\n            .style(\"left\", d3.event.pageX + 20 + \"px\")\r\n            .style(\"top\", d3.event.pageY + 20 + \"px\");\r\n          tooltip.attr(\"data-date\", d[0]);\r\n        })\r\n        .on(\"mouseout\", function(d) {\r\n          tooltip\r\n            .transition()\r\n            .duration(400)\r\n            .style(\"opacity\", 0);\r\n        });\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    drawChart();\r\n  }, []);\r\n  return (\r\n    <div className=\"container\">\r\n      <header id=\"title\">\r\n        <h1>Bar Chart</h1>\r\n      </header>\r\n      <div id=\"barchart\"></div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport BarChart from \"./components/BarChart\";\nimport \"./App.css\";\n\nfunction App(props) {\n  const openVis = vis => {\n    props.history.push(`/${vis}`);\n  };\n\n  return (\n    <div className=\"App\">\n      <Route\n        exact\n        path=\"/\"\n        render={props => (\n          <React.Fragment>\n            <header>D3 Visualizations</header>\n            <div className=\"visualization-selectors\">\n              <button className=\"button\" onClick={() => openVis(\"bar-chart\")}>\n                Bar Chart\n              </button>\n            </div>\n          </React.Fragment>\n        )}\n      />\n      <Route path=\"/bar-chart\" render={props => <BarChart />} />\n    </div>\n  );\n}\n\nexport default () => (\n  <Router basename=\"/d3-visualizations\">\n    <Route component={App} />\n  </Router>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}